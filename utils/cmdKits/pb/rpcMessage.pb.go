// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcMessage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CmdRequest struct {
	CmdName              string              `protobuf:"bytes,1,opt,name=cmdName,proto3" json:"cmdName,omitempty"`
	Args                 []string            `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Files                []*CmdRequest_Files `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CmdRequest) Reset()         { *m = CmdRequest{} }
func (m *CmdRequest) String() string { return proto.CompactTextString(m) }
func (*CmdRequest) ProtoMessage()    {}
func (*CmdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcMessage_b080fb3b829184ac, []int{0}
}
func (m *CmdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdRequest.Unmarshal(m, b)
}
func (m *CmdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdRequest.Marshal(b, m, deterministic)
}
func (dst *CmdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdRequest.Merge(dst, src)
}
func (m *CmdRequest) XXX_Size() int {
	return xxx_messageInfo_CmdRequest.Size(m)
}
func (m *CmdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CmdRequest proto.InternalMessageInfo

func (m *CmdRequest) GetCmdName() string {
	if m != nil {
		return m.CmdName
	}
	return ""
}

func (m *CmdRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CmdRequest) GetFiles() []*CmdRequest_Files {
	if m != nil {
		return m.Files
	}
	return nil
}

type CmdRequest_Files struct {
	FileName             string   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	FullPath             string   `protobuf:"bytes,2,opt,name=fullPath,proto3" json:"fullPath,omitempty"`
	FileData             []byte   `protobuf:"bytes,3,opt,name=fileData,proto3" json:"fileData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdRequest_Files) Reset()         { *m = CmdRequest_Files{} }
func (m *CmdRequest_Files) String() string { return proto.CompactTextString(m) }
func (*CmdRequest_Files) ProtoMessage()    {}
func (*CmdRequest_Files) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcMessage_b080fb3b829184ac, []int{0, 0}
}
func (m *CmdRequest_Files) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdRequest_Files.Unmarshal(m, b)
}
func (m *CmdRequest_Files) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdRequest_Files.Marshal(b, m, deterministic)
}
func (dst *CmdRequest_Files) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdRequest_Files.Merge(dst, src)
}
func (m *CmdRequest_Files) XXX_Size() int {
	return xxx_messageInfo_CmdRequest_Files.Size(m)
}
func (m *CmdRequest_Files) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdRequest_Files.DiscardUnknown(m)
}

var xxx_messageInfo_CmdRequest_Files proto.InternalMessageInfo

func (m *CmdRequest_Files) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *CmdRequest_Files) GetFullPath() string {
	if m != nil {
		return m.FullPath
	}
	return ""
}

func (m *CmdRequest_Files) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

type CmdResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CmdResponse) Reset()         { *m = CmdResponse{} }
func (m *CmdResponse) String() string { return proto.CompactTextString(m) }
func (*CmdResponse) ProtoMessage()    {}
func (*CmdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcMessage_b080fb3b829184ac, []int{1}
}
func (m *CmdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CmdResponse.Unmarshal(m, b)
}
func (m *CmdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CmdResponse.Marshal(b, m, deterministic)
}
func (dst *CmdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CmdResponse.Merge(dst, src)
}
func (m *CmdResponse) XXX_Size() int {
	return xxx_messageInfo_CmdResponse.Size(m)
}
func (m *CmdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CmdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CmdResponse proto.InternalMessageInfo

func (m *CmdResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*CmdRequest)(nil), "pb.CmdRequest")
	proto.RegisterType((*CmdRequest_Files)(nil), "pb.CmdRequest.Files")
	proto.RegisterType((*CmdResponse)(nil), "pb.CmdResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CmdTaskClient is the client API for CmdTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CmdTaskClient interface {
	RpcTask(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdResponse, error)
}

type cmdTaskClient struct {
	cc *grpc.ClientConn
}

func NewCmdTaskClient(cc *grpc.ClientConn) CmdTaskClient {
	return &cmdTaskClient{cc}
}

func (c *cmdTaskClient) RpcTask(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*CmdResponse, error) {
	out := new(CmdResponse)
	err := c.cc.Invoke(ctx, "/pb.CmdTask/RpcTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdTaskServer is the server API for CmdTask service.
type CmdTaskServer interface {
	RpcTask(context.Context, *CmdRequest) (*CmdResponse, error)
}

func RegisterCmdTaskServer(s *grpc.Server, srv CmdTaskServer) {
	s.RegisterService(&_CmdTask_serviceDesc, srv)
}

func _CmdTask_RpcTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdTaskServer).RpcTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CmdTask/RpcTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdTaskServer).RpcTask(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmdTask_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CmdTask",
	HandlerType: (*CmdTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RpcTask",
			Handler:    _CmdTask_RpcTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcMessage.proto",
}

func init() { proto.RegisterFile("rpcMessage.proto", fileDescriptor_rpcMessage_b080fb3b829184ac) }

var fileDescriptor_rpcMessage_b080fb3b829184ac = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x6d, 0xeb, 0x5a, 0x77, 0x56, 0x54, 0x82, 0x87, 0x50, 0x10, 0x4a, 0x2f, 0x16, 0xd1,
	0x1c, 0xd6, 0x83, 0xf7, 0x5d, 0xf1, 0x22, 0xca, 0x12, 0xbc, 0x79, 0x4a, 0x9b, 0xb8, 0x16, 0x9b,
	0x26, 0x76, 0xd2, 0x4f, 0xe8, 0x17, 0x93, 0xa6, 0x7f, 0xd4, 0xdb, 0xfc, 0xf2, 0x92, 0x79, 0x79,
	0x0f, 0xce, 0x5b, 0x5b, 0x3e, 0x2b, 0x44, 0xb1, 0x57, 0xcc, 0xb6, 0xc6, 0x19, 0x12, 0xda, 0x22,
	0xfb, 0x0e, 0x00, 0xb6, 0x5a, 0x72, 0xf5, 0xd5, 0x29, 0x74, 0x84, 0x42, 0x5c, 0x6a, 0xf9, 0x22,
	0xb4, 0xa2, 0x41, 0x1a, 0xe4, 0x4b, 0x3e, 0x21, 0x21, 0x70, 0x28, 0xda, 0x3d, 0xd2, 0x30, 0x8d,
	0xf2, 0x25, 0xf7, 0x33, 0xb9, 0x86, 0xc5, 0x7b, 0x55, 0x2b, 0xa4, 0x51, 0x1a, 0xe5, 0xab, 0xf5,
	0x05, 0xb3, 0x05, 0xfb, 0x5d, 0xc6, 0x1e, 0x7b, 0x8d, 0x0f, 0x57, 0x92, 0x37, 0x58, 0x78, 0x26,
	0x09, 0x1c, 0xf7, 0x27, 0x7f, 0x3c, 0x66, 0xf6, 0x5a, 0x57, 0xd7, 0x3b, 0xe1, 0x3e, 0x68, 0x38,
	0x6a, 0x23, 0x4f, 0xef, 0x1e, 0x84, 0x13, 0x34, 0x4a, 0x83, 0xfc, 0x84, 0xcf, 0x9c, 0x5d, 0xc1,
	0xca, 0xfb, 0xa2, 0x35, 0x0d, 0xaa, 0x3e, 0x85, 0x1e, 0x92, 0x4e, 0x29, 0x46, 0x5c, 0xdf, 0x43,
	0xbc, 0xd5, 0xf2, 0x55, 0xe0, 0x27, 0xb9, 0x81, 0x98, 0xdb, 0xd2, 0x8f, 0xa7, 0xff, 0x3f, 0x9e,
	0x9c, 0xcd, 0x3c, 0x2c, 0xcc, 0x0e, 0x36, 0xb7, 0x70, 0x59, 0x1a, 0xcd, 0x9a, 0x02, 0x59, 0x63,
	0xa4, 0x62, 0x9d, 0xab, 0x6a, 0x64, 0xa5, 0x96, 0x4f, 0x95, 0x43, 0x66, 0x8b, 0x0d, 0xf0, 0xb9,
	0xde, 0x5d, 0x50, 0x1c, 0xf9, 0x86, 0xef, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x16, 0xf4, 0x57,
	0x88, 0x75, 0x01, 0x00, 0x00,
}
