// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcVersionMsg.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VersionRequest struct {
	CmdName              string   `protobuf:"bytes,1,opt,name=cmdName,proto3" json:"cmdName,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcVersionMsg_0e8ba68d46405475, []int{0}
}
func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (dst *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(dst, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

func (m *VersionRequest) GetCmdName() string {
	if m != nil {
		return m.CmdName
	}
	return ""
}

func (m *VersionRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type VersionResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_rpcVersionMsg_0e8ba68d46405475, []int{1}
}
func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (dst *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(dst, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "pb.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "pb.VersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VersionTaskClient is the client API for VersionTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionTaskClient interface {
	SystemVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type versionTaskClient struct {
	cc *grpc.ClientConn
}

func NewVersionTaskClient(cc *grpc.ClientConn) VersionTaskClient {
	return &versionTaskClient{cc}
}

func (c *versionTaskClient) SystemVersion(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/pb.VersionTask/SystemVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionTaskServer is the server API for VersionTask service.
type VersionTaskServer interface {
	SystemVersion(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterVersionTaskServer(s *grpc.Server, srv VersionTaskServer) {
	s.RegisterService(&_VersionTask_serviceDesc, srv)
}

func _VersionTask_SystemVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTaskServer).SystemVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VersionTask/SystemVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTaskServer).SystemVersion(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionTask_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VersionTask",
	HandlerType: (*VersionTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemVersion",
			Handler:    _VersionTask_SystemVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcVersionMsg.proto",
}

func init() { proto.RegisterFile("rpcVersionMsg.proto", fileDescriptor_rpcVersionMsg_0e8ba68d46405475) }

var fileDescriptor_rpcVersionMsg_0e8ba68d46405475 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x3f, 0x4b, 0xc5, 0x40,
	0x10, 0xc4, 0xcd, 0x53, 0x94, 0xb7, 0xa2, 0xe2, 0xbd, 0x26, 0x08, 0x42, 0x48, 0x15, 0x10, 0xb6,
	0x50, 0x2b, 0x0b, 0x8b, 0x74, 0x22, 0x8a, 0x9c, 0x62, 0x7f, 0x77, 0x59, 0x42, 0xd0, 0xfb, 0xe3,
	0xed, 0xa5, 0xf0, 0xdb, 0x8b, 0xc9, 0x19, 0x49, 0xb7, 0xf3, 0x63, 0x77, 0x66, 0x07, 0x76, 0x31,
	0x98, 0x77, 0x8a, 0x3c, 0x78, 0xf7, 0xc4, 0x3d, 0x86, 0xe8, 0x93, 0x17, 0x9b, 0xa0, 0xeb, 0x7b,
	0x38, 0xcd, 0x5c, 0xd2, 0xd7, 0x48, 0x9c, 0x44, 0x09, 0x47, 0xc6, 0x76, 0xcf, 0xca, 0x52, 0x59,
	0x54, 0x45, 0xb3, 0x95, 0x7f, 0x52, 0x08, 0x38, 0x50, 0xb1, 0xe7, 0x72, 0x53, 0xed, 0x37, 0x5b,
	0x39, 0xcd, 0xf5, 0x15, 0x9c, 0x2d, 0xf7, 0x1c, 0xbc, 0x63, 0xfa, 0x35, 0xb0, 0xc4, 0xac, 0xfa,
	0xc5, 0x20, 0xcb, 0xeb, 0x07, 0x38, 0xce, 0xcb, 0x6f, 0x8a, 0x3f, 0xc4, 0x1d, 0x9c, 0xbc, 0x7e,
	0x73, 0x22, 0x9b, 0xa1, 0x10, 0x18, 0x34, 0xae, 0xdf, 0xb9, 0xd8, 0xad, 0xd8, 0x1c, 0x51, 0xef,
	0xb5, 0xb7, 0x70, 0x69, 0xbc, 0x45, 0xa7, 0x19, 0x9d, 0xef, 0x08, 0xc7, 0x34, 0x7c, 0x32, 0x1a,
	0xdb, 0x3d, 0x0e, 0x89, 0x31, 0xe8, 0xf6, 0x5c, 0xfe, 0x37, 0x9e, 0xe3, 0x5f, 0x0a, 0x7d, 0x38,
	0x15, 0xbf, 0xf9, 0x09, 0x00, 0x00, 0xff, 0xff, 0x28, 0xa7, 0x69, 0xa0, 0x0f, 0x01, 0x00, 0x00,
}
