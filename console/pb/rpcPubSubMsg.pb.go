// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcPubSubMsg.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PublishRequest struct {
	Topics               string   `protobuf:"bytes,1,opt,name=topics,proto3" json:"topics,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{0}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopics() string {
	if m != nil {
		return m.Topics
	}
	return ""
}

func (m *PublishRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PublishResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{1}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type SubscribeRequest struct {
	Topics               string   `protobuf:"bytes,1,opt,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{2}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopics() string {
	if m != nil {
		return m.Topics
	}
	return ""
}

type SubscribeResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{3}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type PeersRequest struct {
	Topics               string   `protobuf:"bytes,1,opt,name=topics,proto3" json:"topics,omitempty"`
	Depth                int32    `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeersRequest) Reset()         { *m = PeersRequest{} }
func (m *PeersRequest) String() string { return proto.CompactTextString(m) }
func (*PeersRequest) ProtoMessage()    {}
func (*PeersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{4}
}

func (m *PeersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeersRequest.Unmarshal(m, b)
}
func (m *PeersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeersRequest.Marshal(b, m, deterministic)
}
func (m *PeersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeersRequest.Merge(m, src)
}
func (m *PeersRequest) XXX_Size() int {
	return xxx_messageInfo_PeersRequest.Size(m)
}
func (m *PeersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PeersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PeersRequest proto.InternalMessageInfo

func (m *PeersRequest) GetTopics() string {
	if m != nil {
		return m.Topics
	}
	return ""
}

func (m *PeersRequest) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type PeersResponse struct {
	InPeers              []string `protobuf:"bytes,1,rep,name=inPeers,proto3" json:"inPeers,omitempty"`
	OutPeers             []string `protobuf:"bytes,2,rep,name=outPeers,proto3" json:"outPeers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeersResponse) Reset()         { *m = PeersResponse{} }
func (m *PeersResponse) String() string { return proto.CompactTextString(m) }
func (*PeersResponse) ProtoMessage()    {}
func (*PeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{5}
}

func (m *PeersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeersResponse.Unmarshal(m, b)
}
func (m *PeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeersResponse.Marshal(b, m, deterministic)
}
func (m *PeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeersResponse.Merge(m, src)
}
func (m *PeersResponse) XXX_Size() int {
	return xxx_messageInfo_PeersResponse.Size(m)
}
func (m *PeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PeersResponse proto.InternalMessageInfo

func (m *PeersResponse) GetInPeers() []string {
	if m != nil {
		return m.InPeers
	}
	return nil
}

func (m *PeersResponse) GetOutPeers() []string {
	if m != nil {
		return m.OutPeers
	}
	return nil
}

type TopicsRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicsRequest) Reset()         { *m = TopicsRequest{} }
func (m *TopicsRequest) String() string { return proto.CompactTextString(m) }
func (*TopicsRequest) ProtoMessage()    {}
func (*TopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{6}
}

func (m *TopicsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicsRequest.Unmarshal(m, b)
}
func (m *TopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicsRequest.Marshal(b, m, deterministic)
}
func (m *TopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsRequest.Merge(m, src)
}
func (m *TopicsRequest) XXX_Size() int {
	return xxx_messageInfo_TopicsRequest.Size(m)
}
func (m *TopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsRequest proto.InternalMessageInfo

func (m *TopicsRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TopicsResponse struct {
	Topics               []string `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicsResponse) Reset()         { *m = TopicsResponse{} }
func (m *TopicsResponse) String() string { return proto.CompactTextString(m) }
func (*TopicsResponse) ProtoMessage()    {}
func (*TopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b267569370d2592d, []int{7}
}

func (m *TopicsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicsResponse.Unmarshal(m, b)
}
func (m *TopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicsResponse.Marshal(b, m, deterministic)
}
func (m *TopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicsResponse.Merge(m, src)
}
func (m *TopicsResponse) XXX_Size() int {
	return xxx_messageInfo_TopicsResponse.Size(m)
}
func (m *TopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicsResponse proto.InternalMessageInfo

func (m *TopicsResponse) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "pb.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "pb.PublishResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "pb.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "pb.SubscribeResponse")
	proto.RegisterType((*PeersRequest)(nil), "pb.PeersRequest")
	proto.RegisterType((*PeersResponse)(nil), "pb.PeersResponse")
	proto.RegisterType((*TopicsRequest)(nil), "pb.TopicsRequest")
	proto.RegisterType((*TopicsResponse)(nil), "pb.TopicsResponse")
}

func init() { proto.RegisterFile("rpcPubSubMsg.proto", fileDescriptor_b267569370d2592d) }

var fileDescriptor_b267569370d2592d = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x6f, 0xea, 0x30,
	0x10, 0x7c, 0x01, 0x01, 0x8f, 0xd5, 0x83, 0x07, 0x5b, 0x5a, 0x45, 0x39, 0x21, 0x9f, 0xa0, 0x95,
	0x2c, 0xf5, 0xe3, 0x54, 0xf5, 0x84, 0xd4, 0x63, 0xa5, 0x28, 0xf0, 0x07, 0x70, 0x6a, 0x41, 0x54,
	0x88, 0xdd, 0x6c, 0xfc, 0x83, 0xfb, 0x4f, 0x2a, 0xec, 0xc4, 0x24, 0x5c, 0x38, 0xce, 0xec, 0x7a,
	0x76, 0x67, 0xd6, 0x80, 0x85, 0x4e, 0x63, 0x23, 0xd6, 0x46, 0x7c, 0xd0, 0x8e, 0xeb, 0x42, 0x95,
	0x0a, 0x3b, 0x5a, 0xb0, 0x15, 0x8c, 0x63, 0x23, 0x0e, 0x19, 0xed, 0x13, 0xf9, 0x6d, 0x24, 0x95,
	0x78, 0x07, 0xfd, 0x52, 0xe9, 0x2c, 0xa5, 0x30, 0x98, 0x07, 0x8b, 0x61, 0x52, 0x21, 0x0c, 0x61,
	0x70, 0x94, 0x44, 0xdb, 0x9d, 0x0c, 0x3b, 0xb6, 0x50, 0x43, 0xb6, 0x84, 0xff, 0x5e, 0x83, 0xb4,
	0xca, 0x49, 0x9e, 0x44, 0x0a, 0x49, 0xe6, 0x50, 0xd6, 0x22, 0x0e, 0xb1, 0x7b, 0x98, 0xac, 0x8d,
	0xa0, 0xb4, 0xc8, 0x84, 0xbc, 0x32, 0x90, 0x3d, 0xc0, 0xb4, 0xd1, 0x7b, 0x45, 0xf8, 0x0d, 0xfe,
	0xc5, 0x52, 0x16, 0x74, 0xcd, 0xc5, 0x0c, 0x7a, 0x9f, 0x52, 0x97, 0x7b, 0xeb, 0xa1, 0x97, 0x38,
	0xc0, 0xde, 0x61, 0x54, 0xbd, 0xae, 0xc6, 0x84, 0x30, 0xc8, 0x72, 0x4b, 0x85, 0xc1, 0xbc, 0x7b,
	0x32, 0x5b, 0x41, 0x8c, 0xe0, 0xaf, 0x32, 0xa5, 0x2b, 0x75, 0x6c, 0xc9, 0x63, 0xb6, 0x84, 0xd1,
	0xc6, 0x8e, 0xa9, 0xb7, 0x68, 0x64, 0x16, 0xb4, 0x33, 0x5b, 0xc0, 0xb8, 0x6e, 0x3d, 0x3b, 0xf3,
	0x1b, 0x77, 0xcf, 0x1b, 0x3f, 0xfd, 0x04, 0x00, 0xee, 0x72, 0x9b, 0x2d, 0x7d, 0xe1, 0x0b, 0x0c,
	0xaa, 0xb0, 0x11, 0xb9, 0x16, 0xbc, 0x7d, 0xbd, 0xe8, 0xa6, 0xc5, 0x39, 0x69, 0xf6, 0x07, 0x5f,
	0x61, 0xe8, 0xb3, 0xc4, 0xd9, 0xa9, 0xe7, 0xf2, 0x0c, 0xd1, 0xed, 0x05, 0xeb, 0xdf, 0x72, 0xe8,
	0x39, 0xeb, 0x13, 0xab, 0xdd, 0x48, 0x39, 0x9a, 0x36, 0x18, 0xdf, 0xff, 0x08, 0x7d, 0x67, 0x0d,
	0x6d, 0xb9, 0x95, 0x48, 0x84, 0x4d, 0xaa, 0x7e, 0xb2, 0x5a, 0x00, 0xa6, 0xea, 0xc8, 0x73, 0x41,
	0x3c, 0x55, 0x39, 0xa9, 0x83, 0xe4, 0x5a, 0xac, 0x26, 0x89, 0xff, 0xb3, 0x2e, 0xb5, 0x38, 0x10,
	0x7d, 0xfb, 0x75, 0x9f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x21, 0x3c, 0x06, 0xd0, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubTaskClient is the client API for PubSubTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubTaskClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error)
	Topics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsResponse, error)
}

type pubSubTaskClient struct {
	cc *grpc.ClientConn
}

func NewPubSubTaskClient(cc *grpc.ClientConn) PubSubTaskClient {
	return &pubSubTaskClient{cc}
}

func (c *pubSubTaskClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/pb.PubSubTask/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubTaskClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/pb.PubSubTask/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubTaskClient) Peers(ctx context.Context, in *PeersRequest, opts ...grpc.CallOption) (*PeersResponse, error) {
	out := new(PeersResponse)
	err := c.cc.Invoke(ctx, "/pb.PubSubTask/Peers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubTaskClient) Topics(ctx context.Context, in *TopicsRequest, opts ...grpc.CallOption) (*TopicsResponse, error) {
	out := new(TopicsResponse)
	err := c.cc.Invoke(ctx, "/pb.PubSubTask/Topics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubSubTaskServer is the server API for PubSubTask service.
type PubSubTaskServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Peers(context.Context, *PeersRequest) (*PeersResponse, error)
	Topics(context.Context, *TopicsRequest) (*TopicsResponse, error)
}

func RegisterPubSubTaskServer(s *grpc.Server, srv PubSubTaskServer) {
	s.RegisterService(&_PubSubTask_serviceDesc, srv)
}

func _PubSubTask_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubTaskServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PubSubTask/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubTaskServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubTask_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubTaskServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PubSubTask/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubTaskServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubTask_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubTaskServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PubSubTask/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubTaskServer).Peers(ctx, req.(*PeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSubTask_Topics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubTaskServer).Topics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.PubSubTask/Topics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubTaskServer).Topics(ctx, req.(*TopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PubSubTask_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PubSubTask",
	HandlerType: (*PubSubTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSubTask_Publish_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _PubSubTask_Subscribe_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _PubSubTask_Peers_Handler,
		},
		{
			MethodName: "Topics",
			Handler:    _PubSubTask_Topics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcPubSubMsg.proto",
}
